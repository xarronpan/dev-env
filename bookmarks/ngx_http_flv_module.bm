let l:bm_file_version = 1
let l:bm_sessions = {'default': {'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp.h': [{'sign_idx': 9510, 'line_nr': 256, 'content': '} ngx_rtmp_stream_t;', 'annotation': 'data strucct: chunk stream struct (core struct of chunk stream layer) define, including recv state of chunk message'},{'sign_idx': 9511, 'line_nr': 434, 'content': '    ngx_array_t              events[NGX_RTMP_MAX_EVENT];', 'annotation': 'data struct: event handler of protocal message define'},{'sign_idx': 9504, 'line_nr': 267, 'content': 'struct ngx_rtmp_session_s {', 'annotation': 'data struct: rtmp session define (core state of rtmp protocol)'},{'sign_idx': 9509, 'line_nr': 387, 'content': '    uint32_t                       in_csid;', 'annotation': 'data struct: current chunk stream id of rtmp session'},{'sign_idx': 9512, 'line_nr': 438, 'content': '    ngx_array_t              amf;', 'annotation': 'data struct: amf message event handlers define'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_receive.c': [{'sign_idx': 9513, 'line_nr': 437, 'content': '            switch ((*ph)(s, h, in)) {', 'annotation': 'protocol message layer: notify recved amf events'},{'sign_idx': 9512, 'line_nr': 16, 'content': 'ngx_rtmp_protocol_message_handler(ngx_rtmp_session_t *s,', 'annotation': 'protocol message layer: handle recved protocol control message'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_cmd_module.c': [{'sign_idx': 9500, 'line_nr': 871, 'content': 'static ngx_rtmp_amf_handler_t ngx_rtmp_cmd_map[] = {', 'annotation': 'protocol message layer: register amf message handler'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_notify_module.c': [{'sign_idx': 9536, 'line_nr': 1117, 'content': 'ngx_rtmp_notify_play_handle(ngx_rtmp_session_t *s,', 'annotation': 'notify command: receive redirect http response'},{'sign_idx': 9534, 'line_nr': 1471, 'content': '    return ngx_rtmp_netcall_create(s, &ci);', 'annotation': 'notify command: on play, send http request to addr'},{'sign_idx': 9535, 'line_nr': 629, 'content': '    return ngx_rtmp_notify_create_request(s, pool, NGX_RTMP_NOTIFY_PLAY, pl);', 'annotation': 'notify command: send redirect request to remote'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-1.19.0/src/core/ngx_array.c': [{'sign_idx': 9505, 'line_nr': 48, 'content': 'ngx_array_push(ngx_array_t *a)', 'annotation': 'chunk stream layer: subscribe event inf&implement. it push a new sub item, and return the last sub item'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_live_module.h': [{'sign_idx': 9515, 'line_nr': 32, 'content': 'struct ngx_rtmp_live_ctx_s {', 'annotation': 'data struct: rtmp session attaching to one live stream, all rtmp session is linked by the "next" field. one rtmp session current only can publish/play one live stream'},{'sign_idx': 9516, 'line_nr': 65, 'content': '    ngx_int_t                           nbuckets;', 'annotation': 'data struct: hash table to find all live streams'},{'sign_idx': 9514, 'line_nr': 48, 'content': 'struct ngx_rtmp_live_stream_s {', 'annotation': 'data struct: live streams, recording live stream name, and rtmp sessions attaching to this live stream'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_live_module.c': [{'sign_idx': 9520, 'line_nr': 1542, 'content': 'ngx_rtmp_live_play(ngx_rtmp_session_t *s, ngx_rtmp_play_t *v)', 'annotation': 'live streaming: play amf event handler'},{'sign_idx': 9513, 'line_nr': 605, 'content': 'ngx_rtmp_live_join(ngx_rtmp_session_t *s, u_char *name, unsigned publisher)', 'annotation': 'live streaming: add rtmp session to one live stream'},{'sign_idx': 9522, 'line_nr': 1602, 'content': '    h = ngx_array_push(&cmcf->events[NGX_RTMP_MSG_AUDIO]);', 'annotation': 'live streaming: live streaming module register audio and video event handler'},{'sign_idx': 9518, 'line_nr': 631, 'content': '        ngx_rtmp_set_ctx(s, ctx, ngx_rtmp_live_module);', 'annotation': 'live streaming: rtmp session record live stream current using, so we can find which live stream is current joing from a rtmp session'},{'sign_idx': 9524, 'line_nr': 827, 'content': 'ngx_rtmp_live_av(ngx_rtmp_session_t *s, ngx_rtmp_header_t *h,', 'annotation': 'live stream: handle audio and video message. it handles audio/video messages which is published from client or pulled from remote'},{'sign_idx': 9519, 'line_nr': 331, 'content': 'ngx_rtmp_live_get_stream(ngx_rtmp_session_t *s, u_char *name, int create)', 'annotation': 'live streaming: find live stream from hashtable. note there one hashtable for every app (stream_app)'},{'sign_idx': 9523, 'line_nr': 979, 'content': '    /* broadcast to all subscribers */', 'annotation': 'live streaming: broadcast recv auido/video to all live stream subscriber. the packets are queued in the queue of each rtmp session. pakcets are shared with rtmp sessions with a shared buf using an refcounter'},{'sign_idx': 9517, 'line_nr': 675, 'content': '    ctx->next = (*stream)->ctx;', 'annotation': 'live streaming: link current rtmp session struct to live stream, so we can find all rtmp session from live stream struct '},{'sign_idx': 9521, 'line_nr': 1505, 'content': 'ngx_rtmp_live_publish(ngx_rtmp_session_t *s, ngx_rtmp_publish_t *v)', 'annotation': 'live streaming: amf event publish handler'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_relay_module.c': [{'sign_idx': 9532, 'line_nr': 1313, 'content': 'ngx_rtmp_relay_on_result(ngx_rtmp_session_t *s, ngx_rtmp_header_t *h,', 'annotation': 'relay streams: send create stream/play stream command to remote server'},{'sign_idx': 9529, 'line_nr': 566, 'content': '    ngx_rtmp_client_handshake(rs, 1);', 'annotation': 'relay stream: async send handshake request'},{'sign_idx': 9538, 'line_nr': 686, 'content': '    play_ctx = create_play_ctx(s, name, target);', 'annotation': 'replay stream: if stream has already published, create dummy play ctx only, and will not create new remote connection'},{'sign_idx': 9528, 'line_nr': 551, 'content': '    rs = ngx_rtmp_init_session(c, addr_conf);', 'annotation': 'relay stream: create rtmp session when server recv play or publish cmd'},{'sign_idx': 9531, 'line_nr': 578, 'content': 'ngx_rtmp_relay_create_remote_ctx(ngx_rtmp_session_t *s, ngx_str_t *name,', 'annotation': 'relay stream: create client connection when client send play cmd'},{'sign_idx': 9537, 'line_nr': 709, 'content': '    publish_ctx = create_publish_ctx(s, name, target);', 'annotation': 'relay stream: for play relay, if stream is first played, create remote connection for pulling streams'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_gop_cache_module.c': [{'sign_idx': 9527, 'line_nr': 768, 'content': 'ngx_rtmp_gop_cache_av(ngx_rtmp_session_t *s, ngx_rtmp_header_t *h,', 'annotation': 'live streaming: gop cache cache audio/video frames, which is from either remote pulling streams or local publishing streams'},{'sign_idx': 9525, 'line_nr': 521, 'content': 'ngx_rtmp_gop_cache_send(ngx_rtmp_session_t *s)', 'annotation': 'live streaming: when receive play command, gop cache module will send all packets in cache to rtmp session which send play command. the packet are queued in the queue of each rtmp session with an shared queue(with refcount)'},{'sign_idx': 9526, 'line_nr': 874, 'content': 'ngx_rtmp_gop_cache_play(ngx_rtmp_session_t *s, ngx_rtmp_play_t *v)', 'annotation': 'live streaming: gop cache listen to play command, and send data in cache to rtmp session'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp.c': [{'sign_idx': 9502, 'line_nr': 800, 'content': 'ngx_rtmp_add_listening(ngx_conf_t *cf, ngx_rtmp_conf_addr_t *addr)', 'annotation': 'chunk stream layer: start listen to socket'},{'sign_idx': 9507, 'line_nr': 438, 'content': '    /* init standard protocol events */', 'annotation': 'protocol message layer: register handler of protocol message from chunk frames'},{'sign_idx': 9506, 'line_nr': 1063, 'content': 'ngx_rtmp_fire_event(ngx_rtmp_session_t *s, ngx_uint_t evt,', 'annotation': 'chunk stream layer: publish event inf & implement'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_handler.c': [{'sign_idx': 9507, 'line_nr': 194, 'content': 'ngx_rtmp_recv(ngx_event_t *rev)', 'annotation': 'chunk stream layer: recv chunk message'},{'sign_idx': 9513, 'line_nr': 468, 'content': '            if (ngx_rtmp_receive_message(s, h, head) != NGX_OK) {', 'annotation': 'chunk stream layer: succ recv one message from many chunk frames'},{'sign_idx': 9512, 'line_nr': 222, 'content': '        st = &s->in_streams[s->in_csid];', 'annotation': 'chunk stream layer: begin recv chunk frame. csid (chunk stream layer) 0 is a unkowned stream id not used, used as the default csid to recv from chunk frames'},{'sign_idx': 9508, 'line_nr': 502, 'content': 'ngx_rtmp_send(ngx_event_t *wev)', 'annotation': 'chunk stream layer: send chunk message'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_handshake.c': [{'sign_idx': 9530, 'line_nr': 491, 'content': 'ngx_rtmp_handshake_send(ngx_event_t *wev)', 'annotation': 'chunk protol layer: send handshake request when relay remote server success'},],'/home/panxiangrong/projects/mde_r2r_stream_proxy_nginx/src/nginx-http-flv-module/ngx_rtmp_init.c': [{'sign_idx': 9503, 'line_nr': 139, 'content': '    s = ngx_rtmp_init_session(c, rconn->addr_conf);', 'annotation': 'chunk stream layer: create rtmp session struct'},{'sign_idx': 9501, 'line_nr': 19, 'content': 'ngx_rtmp_init_connection(ngx_connection_t *c)', 'annotation': 'chunk stream layer: handle accpeted socket'},],}}
let l:bm_current_session = 'default'
