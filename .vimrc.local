"plugin settings
let NERDTreeQuitOnOpen=0
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:indent_guides_enable_on_vim_startup = 0
let g:signify_disable_by_default = 1
let g:undotree_WindowLayout = 2
let g:undotree_HighlightChangedText = 1
let g:airline_theme = 'solarized_flood'
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#ycm#error_symbol = 'E:'
let g:airline#extensions#ycm#warning_symbol = 'W:'
let g:airline_section_c = '%t'
let g:ycm_always_populate_location_list = 1
highlight ycmwarningline guibg=#ffffcc
highlight ycmwarningsign guibg=#ffffcc
highlight ycmwarningsection guibg=#ffffcc
let g:ycm_auto_hover = ''
let g:ycm_key_invoke_completion = '<c-a>'
let g:ycm_signature_help_disable_syntax = 1
noremap <c-a> <NOP>
let g:comfortable_motion_no_default_key_mappings = 1
let g:gutentags_ctags_executable = 'ctags-universal'
let g:asyncrun_open = 8
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=Black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=Black
let g:cpp_class_scope_highlight = 1
let cpp_no_cpp14 = 1
let cpp_no_cpp17 = 1
let cpp_no_cpp20 = 1
let g:rainbow_conf = {
\   'separately': {
\       'cmake': 0,
\   },
\}
let g:winresizer_start_key = '<C-X>'
let g:go_def_mapping_enabled = 0
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_list_height = 10
let g:far#source = 'ag'
let g:far#enable_undo = 1
let g:nrrw_rgn_incr = 60
let g:nrrw_rgn_hl = 'Search'
let g:VtrClearBeforeSend = 0
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'!',
                \ 'Staged'    :'+',
                \ 'Untracked' :'?',
                \ 'Renamed'   :'r',
                \ 'Unmerged'  :'@',
                \ 'Deleted'   :'-',
                \ 'Dirty'     :'!',
                \ 'Ignored'   :'.',
                \ 'Clean'     :'c',
                \ 'Unknown'   :'#'}
let g:rooter_patterns = ['.git', '.root', '.svn']
let g:ctrlsf_auto_preview = 1
let g:ctrlsf_selected_line_hl = ''
let g:fzf_mru_relative = 1
let g:rooter_manual_only = 1
let g:which_key_use_floating_win = 0
let g:multi_cursor_use_default_mapping=0
let g:VM_Extend_hl = 'Visual'
let g:VM_highlight_matches = 'hi! link Search MatchParen'
let g:lt_location_list_toggle_map = '<leader><leader>l'
let g:lt_quickfix_list_toggle_map = '<leader><leader>q'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''
let g:yoinkIncludeDeleteOperations = 1
let g:bookmark_no_default_key_mappings = 1
let g:taboo_tab_format = '  %N:%f  '
let g:taboo_renamed_tab_format = '  %N:%l  '
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_toc_autofit = 1
let g:git_messenger_preview_mods = "botright"
let g:git_messenger_close_on_cursor_moved = v:false
let g:gitgutter_sign_priority = 5
let g:interestingWordsTermColors = ['2', '3', '1', '4', '13', '6']
let g:ctrlsf_default_root = 'project'
let g:tagbar_position = 'rightbelow'
let g:tagbar_height = 35
let g:vim_tmux_clipboard#loadb_option = '-w'
let g:pymode_lint = 0
let g:ale_linters = {
\   'go': [],
\   'cpp': [],
\   'c': [],
\   'python': ['pyflakes'],
\}

let g:lsp_diagnostics_enabled = 0
let g:lsp_document_highlight_enabled = 0
if executable('ccls')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'ccls',
      "\ 'cmd': {server_info->['ccls', '-log-file=/tmp/ccls.log', '-v=1']},
      \ 'cmd': {server_info->['ccls']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': {'cache': {'directory': expand('~/.cache/ccls'), 'retainInMemory': 0}, 'index': {'threads': 1} },
      \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
      \ })
endif
let g:ccls_position = 'botright'
let g:ccls_orientation = 'horizontal'
let g:ccls_size = 15

let g:formatdef_google_cpp = "'clang-format  -style=Google  -lines='.a:firstline.':'.a:lastline"
let g:formatters_cpp = ['google_cpp']
let g:any_jump_disable_default_keybindings = 1
let g:any_jump_search_prefered_engine = 'ag'
let g:any_jump_preview_lines_count = 20
let g:any_jump_max_search_results = 20
let g:any_jump_window_width_ratio  = 0.8
let g:any_jump_window_height_ratio = 0.8
let g:any_jump_colors = {
      \"plain_text":         "AnyJumpPlainText",
      \"preview":            "AnyJumpPreview",
      \"preview_keyword":    "AnyJumpPreviewKeyword",
      \"heading_text":       "AnyJumpHeadingText",
      \"heading_keyword":    "AnyJumpHeadingKeyword",
      \"group_text":         "AnyJumpPlainText",
      \"group_name":         "AnyJumpResultPath",
      \"more_button":        "AnyJumpHelp",
      \"more_explain":       "AnyJumpHelp",
      \"result_line_number": "AnyJumpResultPath",
      \"result_text":        "AnyJumpPlainText",
      \"result_path":        "AnyJumpResultPath",
      \"help":               "AnyJumpHelp"
      \}
let g:easyescape_chars = { "j": 2 }
let g:easyescape_timeout = 200
let g:doge_mapping = '<Leader><Leader>dg'
let g:scratch_top = 0
"let g:cpp_include_log = 1

"vim setting configure
"set ttymouse=xterm2
set expandtab softtabstop=2 tabstop=2 shiftwidth=2
set undodir=~/.vim/undodir
set undofile
set showcmd
set lazyredraw
let g:solarized_termcolors=16
color solarized
autocmd BufEnter *.go call timer_start(10, { tid -> execute('setlocal nolist') })
autocmd BufEnter * call timer_start(10, { tid -> execute('setlocal nospell') })
autocmd BufEnter * call timer_start(10, { tid -> execute('hi MatchParen cterm=underline ctermbg=none ctermfg=red') })
autocmd BufEnter * call timer_start(10, { tid -> execute('highlight GitGutterAdd    guifg=#009900 guibg=black ctermfg=2 ctermbg=black') })
autocmd BufEnter * call timer_start(10, { tid -> execute('highlight GitGutterChange guifg=#bbbb00 guibg=black ctermfg=3 ctermbg=black') })
autocmd BufEnter * call timer_start(10, { tid -> execute('highlight GitGutterDelete guifg=#ff2222 guibg=black ctermfg=1 ctermbg=black') })
highlight VertSplit ctermbg=black ctermfg=239
highlight SignColumn ctermbg=black
highlight Cursorline ctermbg=8
highlight link EasyMotionShade Comment
highlight Pmenu ctermbg=black ctermfg=15
highlight PmenuSel ctermbg=red ctermfg=7
highlight AnyJumpPlainText ctermbg=yellow ctermfg=15
highlight AnyJumpHeadingText ctermbg=green ctermfg=15
highlight AnyJumpHeadingKeyword ctermbg=red ctermfg=15
highlight AnyJumpHelp ctermbg=gray ctermfg=15
highlight AnyJumpResultPath ctermbg=6 ctermfg=15
highlight AnyJumpPreview ctermbg=black ctermfg=15
highlight AnyJumpPreviewKeyword ctermbg=red ctermfg=15

autocmd! FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

function! s:p(...)
  let preview_args = get(g:, 'fzf_preview_window', ['right', 'ctrl-/'])
  if empty(preview_args)
    return { 'options': ['--preview-window', 'hidden'] }
  endif

  " For backward-compatiblity
  if type(preview_args) == type('')
    let preview_args = [preview_args]
  endif
  return call('fzf#vim#with_preview', extend(copy(a:000), preview_args))
endfunction

"fix alt key mapping
function! Terminal_MetaMode(mode)
  set ttimeout
  if $TMUX != ''
    set ttimeoutlen=30
  elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
    set ttimeoutlen=80
  endif
  if has('nvim') || has('gui_running')
    return
  endif
  function! s:metacode(mode, key)
    if a:mode == 0
        exec "set <M-".a:key.">=\e".a:key
    else
        exec "set <M-".a:key.">=\e]{0}".a:key."~"
    endif
  endfunc
  for i in range(10)
    call s:metacode(a:mode, nr2char(char2nr('0') + i))
  endfor
  for i in range(26)
    call s:metacode(a:mode, nr2char(char2nr('a') + i))
    call s:metacode(a:mode, nr2char(char2nr('A') + i))
  endfor
  if a:mode != 0
    for c in [',', '.', '/', ';', '[', ']', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  else
    for c in [',', '.', '/', ';', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  endif
endfunc

function! ExInHorSplit(cmd)
  redir => message
  silent execute 'g/.*/p'
  redir END
  silent execute 'norm!``'
  if empty(message)
    echoerr "no output"
  else
    sp
    enew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
    silent execute '%s/\(^\s*\d\+\)\?//'
    silent execute a:cmd
  endif
endfunction

function! ExInVerSplit(cmd)
  redir => message
  silent execute 'g/.*/p'
  redir END
  silent execute 'norm!``'
  if empty(message)
    echoerr "no output"
  else
    vnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
    silent execute '%s/\(^\s*\d\+\)\?//'
    silent execute a:cmd
  endif
endfunction

command! -nargs=+ -complete=command ExInHorSplit call ExInHorSplit(<q-args>)
command! -nargs=+ -complete=command ExInVerSplit call ExInVerSplit(<q-args>)

function! VirtualFunctions()
  redir => message
  silent execute 'g/.*/p'
  redir END
  silent execute 'norm!``'
  if empty(message)
    echoerr "no output"
  else
    sp
    enew
    setlocal buftype=nofile bufhidden=wipe ft=cpp noswapfile nobuflisted nomodified
    silent put=message
    silent execute '%s/\(^\s*\d\+\)\?//'
    silent execute "%!pcregrep -M " . shellescape('(^\s*virtual(\n|.)+?\))|(^\s*class\s*\w+)')
    silent execute '%s/:\s*\(private\|public\)\s\+.*$//ge'
    silent execute '%s/{.*//ge'
    silent execute '%s/\s*[{:;}]\s*//ge'
    silent execute '%s/)\s*\(\S.*\)/) \/\/\1/ge'
    silent execute '%s/)/);/ge'
    silent execute 'g/^\s\+$/d'
    silent execute '%s/\s\+$//ge'
  endif
endfunction

command! VirtualFunctions call VirtualFunctions()

"abbrevate command configure
command! -bang -nargs=* CWAg call fzf#vim#ag(expand('<cword>'),s:p(),<bang>0)
command! -bang -nargs=* CWTags call fzf#vim#tags(expand('<cword>'), fzf#vim#with_preview({ "placeholder": "--tag {2}:{-1}:{3..}" }), <bang>0)',

command! -bang -nargs=* CWBLines
      \ call fzf#vim#buffer_lines(expand('<cword>'),
      \     fzf_preview#p(<bang>0, {'placeholder': fzf#shellescape(expand('%')) . ':{1}',
      \                 'options': '--preview-window +{1}-/2'}),
      \     <bang>0)

command! -bang -nargs=* FSFZFBLines
      \ call fzf#vim#buffer_lines(<q-args>,
      \     fzf_preview#p(<bang>0, {'placeholder': fzf#shellescape(expand('%')) . ':{1}',
      \                 'options': '--preview-window +{1}-/2'}),
      \     <bang>0)

function! GetShellCheatSheetFold(lnum)
  if getline(a:lnum) =~? '\v(^#####.+$)|(^.+\*\*\*\*.+$)'
    if getline(a:lnum + 1) =~? '\v^#+ .+$'
      return '0'
    endif
  endif
  return '1'
endfunction

function! GetGolangCheatSheetFold(lnum)
  if getline(a:lnum) =~? '\v^.+\*\*\*\*\*.+$'
    if getline(a:lnum + 1) =~? '\v^.*\* .+$'
      return '0'
    endif
  endif
  return '1'
endfunction

function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart(line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

function! IndentFoldText()
  return getline(v:foldstart)
endfunction

cnoreabbrev ACK Rooter <bar> Ack!
cnoreabbrev AG Rooter <bar> Ag!
cnoreabbrev A cd %:p:h <bar> A
cnoreabbrev AV cd %:p:h <bar> AV
cnoreabbrev BL FSFZFBLines!
cnoreabbrev AR AsyncRun
cnoreabbrev TR VtrSendCommandToRunner!
cnoreabbrev TRL VtrSendLinesToRunner!
cnoreabbrev TA VtrAttachToPane
cnoreabbrev BM Bookmark
cnoreabbrev EBM EditBookmarks
cnoreabbrev TL Translate
cnoreabbrev YR YcmCompleter RefactorRename
cnoreabbrev YF YcmCompleter Format
cnoreabbrev SW Scratch
cnoreabbrev DL Linediff
cnoreabbrev DB windo diffthis
cnoreabbrev UDB windo diffoff
cnoreabbrev DD DirDiff
cnoreabbrev PR Rooter
cnoreabbrev CF CtrlSF
cnoreabbrev FAR Rooter <bar> Far
cnoreabbrev ET ExInTab
cnoreabbrev EV ExInVerSplit
cnoreabbrev EH ExInHorSplit
cnoreabbrev VSA VSSplitAbove
cnoreabbrev VSB VSSplitBelow
cnoreabbrev RT TabooRename
cnoreabbrev AJ Rooter <bar> AnyJump
cnoreabbrev GC Commits
cnoreabbrev GBC BCommits
cnoreabbrev AF Autoformat
cnoreabbrev CL AsyncRun cpplint %:p
cnoreabbrev CI CppInclude
cnoreabbrev HBC CclsBaseHierarchy
cnoreabbrev HDC CclsDerivedHierarchy
cnoreabbrev HCA CclsCallHierarchy
cnoreabbrev HCE CclsCalleeHierarchy
cnoreabbrev HMB CclsMemberHierarchy
cnoreabbrev HMF CclsMemberFunctionHierarchy
cnoreabbrev HMT CclsMemberTypeHierarchy
cnoreabbrev QBC CclsBase
cnoreabbrev QDC CclsDerived
cnoreabbrev QCA CclsCallers
cnoreabbrev QCE CclsCallees
cnoreabbrev QMB CclsMembers
cnoreabbrev QMF CclsMemberFunctions
cnoreabbrev QMT CclsMemberTypes

"text add slash
cnoreabbrev SAS s/$/\//
"text add back slash
cnoreabbrev SABS s/$/\\/
"text remove trailing space
cnoreabbrev SRTS s/\v[ ]+$//

cnoreabbrev VF VirtualFunctions

"key mappings configure
let mapleader = ","
inoremap jj <Esc>
call Terminal_MetaMode(0)
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-h> <C-w>h
noremap <C-l> <C-w>l
map <Space> <Plug>(easymotion-prefix)
noremap <M-u> <C-w>p<C-u><C-w>p
noremap <M-d> <C-w>p<C-d><C-w>p
noremap <M-j> <C-w>p5<C-e><C-w>p
noremap <M-k> <C-w>p5<C-y><C-w>p
noremap <M-h> :SidewaysLeft<cr>
noremap <M-l> :SidewaysRight<cr>
nnoremap <silent> <leader>tn :tabnew<CR>
nnoremap <silent> <leader>tc :tabclose<CR>
nnoremap <silent> <leader>sw :Scratch<CR>
nnoremap <silent> <leader>sp :ScratchPreview<CR>
nnoremap <leader><leader>t :Toc<CR>
nnoremap <leader><leader>f :Folds<CR>
nnoremap <silent> <leader>n :enew<CR>
nnoremap <silent> <leader>ee :echo ''<CR>
nnoremap <silent> <leader>ep :echo expand('%:p')<CR>
nnoremap <silent> <leader>gd :YcmCompleter GoTo<CR>
nnoremap <silent> <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <silent> <leader>fi :YcmCompleter FixIt<CR>
nnoremap <silent> <leader>gi :YcmCompleter GoToImplementation<CR>
nnoremap <silent> <leader>gt :YcmCompleter GoToType<CR>
nnoremap <silent> <leader>et :YcmCompleter GetType<CR>
nnoremap <silent> <leader>do :YcmCompleter GetDoc<CR>
noremap <silent> <leader>pt :vsplit <CR>:YcmCompleter GoToType<CR><c-w>p
noremap <silent> <leader>pd :vsplit <CR>:YcmCompleter GoTo<CR><c-w>p
noremap <silent> <leader>vf :split <CR>:YcmCompleter GoToType<CR>:VirtualFunctions<CR><c-w>p<c-w>c
noremap <silent> <leader>pc <c-w>p<c-w>c
imap <silent> <C-k> <ESC>[(b:10split <CR>:YcmCompleter GoTo<CR><c-w>pgi
imap <silent> <C-l> <ESC>[(b:YcmCompleter GoTo<CR>:q<CR>:FZFQuickFix<CR>
nnoremap <silent> <C-i> :resize 10<CR><c-w>kgi
nnoremap <silent> <C-f> :Rooter <bar> Files<CR>
nnoremap <silent> <C-t> :BTags<CR>
nnoremap <silent> <C-g> :Rooter <bar> CWAg!<CR>
nnoremap <silent> <C-]> :Rooter <bar> CWTags!<CR>
nnoremap <silent> <C-b> :CWBLines!<CR>
nnoremap <silent> <C-c> :Commands<CR>
nnoremap <silent> <leader>M :Rooter<bar>FZFMru<CR>
nnoremap <silent> <leader>R :Rooter<bar>FZFFreshMru<CR>
nnoremap <silent> <leader>H :History<CR>
nnoremap <silent> <leader>B :Buffers<CR>
nnoremap <silent> <leader>W :Windows<CR>
nnoremap <silent> <leader>: :History:<CR>
nnoremap <silent> <leader>// :History/<CR>
nnoremap <silent> <leader>L :FZFLocList!<CR>
nnoremap <silent> <leader>Q :FZFQuickFix!<CR>
nnoremap <silent> <leader>F :cd %:p:h <bar> Files<CR>
nnoremap <silent> <leader>G :cd %:p:h <bar> CWAg!<CR>
nnoremap <silent> <leader><leader>gd :GenDeclaration<CR>
nnoremap <silent> <leader><leader>gi :GenDefinition<CR>
nnoremap <silent> <leader><leader>gh :CppInclude<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
inoremap <expr> <c-x><c-r> fzf#vim#complete('cat ~/.zsh_history\|cut -c 16-\|tac')
nmap s <Plug>(easymotion-overwin-f)
nmap <leader>w <Plug>(easymotion-overwin-w)
nmap <leader>l <Plug>(easymotion-overwin-line)
map  <space>w <Plug>(easymotion-bd-w)
map  <space>W <Plug>(easymotion-bd-W)
map  <space>e <Plug>(easymotion-bd-e)
map  <space>E <Plug>(easymotion-bd-E)
map  <space>f <Plug>(easymotion-bd-f)
map  <space>t <Plug>(easymotion-bd-t)
map  <space>n <Plug>(easymotion-bd-n)
map  <space>l <Plug>(easymotion-lineforward)
map  <space>h <Plug>(easymotion-linebackward)
nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
nnoremap <leader>cfs :setlocal foldmethod=syntax foldtext=IndentFoldText()<CR>
nnoremap <leader>cfi :setlocal foldmethod=indent foldtext=foldtext()<CR>
map <C-e> :Rooter <bar> NERDTreeTabsToggle<CR>
nmap <leader>nt :Rooter <bar> NERDTreeFind<CR>
nnoremap <silent> <leader> :WhichKey ','<CR>
nnoremap <silent> <space>  :WhichKey '<Space>'<CR>
nmap <M-n> <plug>(YoinkPostPasteSwapBack)
nmap <M-p> <plug>(YoinkPostPasteSwapForward)
nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
nnoremap m d
xnoremap m d
nnoremap mm dd
nnoremap M D
nmap <leader>mm <Plug>BookmarkToggle
nmap <leader>mi <Plug>BookmarkAnnotate
nmap <leader>ma <Plug>BookmarkShowAll
nmap <leader>mn <Plug>BookmarkNext
nmap <leader>mp <Plug>BookmarkPrev
nmap <leader>mc <Plug>BookmarkClear
nmap <leader>mx <Plug>BookmarkClearAll
nmap <leader>mkk <Plug>BookmarkMoveUp
nmap <leader>mjj <Plug>BookmarkMoveDown
nmap <leader>mg <Plug>BookmarkMoveToLine
nmap <leader>]]c <plug>(signify-next-hunk)
nmap <leader>[[c <plug>(signify-prev-hunk)
nnoremap <silent> <leader>/ :OverCommandLine<CR>
nnoremap <leader>j :Rooter<bar>AnyJump<CR>
xnoremap <leader>j :Rooter<bar>AnyJumpVisual<CR>
nmap <leader><leader>ds :w !cat > /tmp/vim_delta_buffer<CR>:term ++curwin ++close sh -c "cat /tmp/vim_delta_buffer <bar> delta"<CR>
nmap <leader><leader>dv :w !cat > /tmp/vim_delta_buffer<CR>:term ++curwin ++close sh -c "cat /tmp/vim_delta_buffer <bar> delta -s"<CR>
au FileType go nmap <Leader>gd :YcmCompleter GoTo<CR>
au FileType go nmap <leader>goi <Plug>(go-implements)
au FileType go nmap <leader>god <Plug>(go-describe)

if filereadable("./.workspace.vim")
   source ./.workspace.vim
endif
