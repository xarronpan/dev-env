"plugin settings
let NERDTreeQuitOnOpen=0
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:indent_guides_enable_on_vim_startup = 0
let g:signify_priority = 5
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#ycm#error_symbol = 'E:'
let g:airline#extensions#ycm#warning_symbol = 'W:'
let g:ycm_always_populate_location_list = 1
highlight ycmwarningline guibg=#ffffcc
highlight ycmwarningsign guibg=#ffffcc
highlight ycmwarningsection guibg=#ffffcc
let g:ycm_auto_hover = ''
let g:ycm_key_invoke_completion = '<c-a>'
noremap <c-a> <NOP>
let g:comfortable_motion_no_default_key_mappings = 1
let g:gutentags_ctags_executable = 'ctags-universal'
let g:asyncrun_open = 8
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=Black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=Black
let g:cpp_class_scope_highlight = 1
let cpp_no_cpp14 = 1
let cpp_no_cpp17 = 1
let cpp_no_cpp20 = 1
let g:protodefprotogetter = '~/.vim/bundle/vim-protodef/pullproto.pl'
let g:disable_protodef_sorting = 1
let g:rainbow_conf = {
\   'separately': {
\       'cmake': 0,
\   },
\}
let g:winresizer_start_key = '<C-Z>'
let g:go_def_mapping_enabled = 0
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_list_height = 10
let g:far#source = 'ag'
let g:far#enable_undo = 1
let g:context_enabled = 0
let g:context_add_mappings = 0
let g:nrrw_rgn_incr = 60
let g:nrrw_rgn_hl = 'Search'
let g:VtrClearBeforeSend = 0
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'!',
                \ 'Staged'    :'+',
                \ 'Untracked' :'?',
                \ 'Renamed'   :'r',
                \ 'Unmerged'  :'@',
                \ 'Deleted'   :'-',
                \ 'Dirty'     :'!',
                \ 'Ignored'   :'.',
                \ 'Clean'     :'c',
                \ 'Unknown'   :'#'}
let g:rooter_patterns = ['.git', '.root', '.svn']
let g:ctrlsf_auto_preview = 1
let g:ctrlsf_selected_line_hl = ''
let g:fzf_mru_relative = 1
let g:rooter_manual_only = 1
let g:which_key_use_floating_win = 0
let g:multi_cursor_use_default_mapping=0
let g:VM_Extend_hl = 'Visual'
let g:VM_highlight_matches = 'hi! link Search PmenuSel'

"vim setting configure
set ttymouse=xterm2
set expandtab softtabstop=2 tabstop=2 shiftwidth=2
set undodir=~/.vim/undodir
set undofile
set showcmd
let g:solarized_termcolors=16
color solarized
autocmd BufEnter *.go call timer_start(10, { tid -> execute('setlocal nolist') })
autocmd BufEnter * call timer_start(10, { tid -> execute('setlocal nospell') })
autocmd BufEnter * call timer_start(10, { tid -> execute('hi MatchParen cterm=none ctermbg=none ctermfg=red') })

function! s:p(...)
  let preview_args = get(g:, 'fzf_preview_window', ['right', 'ctrl-/'])
  if empty(preview_args)
    return { 'options': ['--preview-window', 'hidden'] }
  endif

  " For backward-compatiblity
  if type(preview_args) == type('')
    let preview_args = [preview_args]
  endif
  return call('fzf#vim#with_preview', extend(copy(a:000), preview_args))
endfunction

"fix alt key mapping
function! Terminal_MetaMode(mode)
  set ttimeout
  if $TMUX != ''
    set ttimeoutlen=30
  elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
    set ttimeoutlen=80
  endif
  if has('nvim') || has('gui_running')
    return
  endif
  function! s:metacode(mode, key)
    if a:mode == 0
        exec "set <M-".a:key.">=\e".a:key
    else
        exec "set <M-".a:key.">=\e]{0}".a:key."~"
    endif
  endfunc
  for i in range(10)
    call s:metacode(a:mode, nr2char(char2nr('0') + i))
  endfor
  for i in range(26)
    call s:metacode(a:mode, nr2char(char2nr('a') + i))
    call s:metacode(a:mode, nr2char(char2nr('A') + i))
  endfor
  if a:mode != 0
    for c in [',', '.', '/', ';', '[', ']', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  else
    for c in [',', '.', '/', ';', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  endif
endfunc

function! TabMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

"abbrevate command configure
command! -bang -nargs=* CWAg call fzf#vim#ag(expand('<cword>'),s:p(),<bang>0)
command! -bang -nargs=* CWBLines
      \ call fzf#vim#buffer_lines(expand('<cword>'),
      \     fzf_preview#p(<bang>0, {'placeholder': fzf#shellescape(expand('%')) . ':{1}',
      \                 'options': '--preview-window +{1}-/2'}),
      \     <bang>0)

command! -bang -nargs=* FSFZFBLines
      \ call fzf#vim#buffer_lines(<q-args>,
      \     fzf_preview#p(<bang>0, {'placeholder': fzf#shellescape(expand('%')) . ':{1}',
      \                 'options': '--preview-window +{1}-/2'}),
      \     <bang>0)

cnoreabbrev ACK Rooter <bar> Ack!
cnoreabbrev AG Rooter <bar> Ag!
cnoreabbrev FB FSFZFBLines!
cnoreabbrev AR AsyncRun
cnoreabbrev TR VtrSendCommandToRunner!
cnoreabbrev TRL VtrSendLinesToRunner!
cnoreabbrev TA VtrAttachToPane
cnoreabbrev BM Bookmark
cnoreabbrev EBM EditBookmarks
cnoreabbrev TL Translate
cnoreabbrev YR YcmCompleter RefactorRename
cnoreabbrev YF YcmCompleter Format
cnoreabbrev CT ContextToggle
cnoreabbrev SW Scratch
cnoreabbrev DL Linediff
cnoreabbrev DB diffthis
cnoreabbrev DD DirDiff
cnoreabbrev PR Rooter
cnoreabbrev CF Rooter <bar> CtrlSF
cnoreabbrev FAR Rooter <bar> Far
cnoreabbrev TM TabMessage
cnoreabbrev VSA VSSplitAbove
cnoreabbrev VSB VSSplitBelow

"add slash
cnoreabbrev AS s/$/\//
"add back slash
cnoreabbrev ABS s/$/\\/
"remove trailing space
cnoreabbrev RTS s/\v[ ]+$//

"key mappings configure
let mapleader = ","
inoremap jj <Esc>
call Terminal_MetaMode(0)
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-h> <C-w>h
noremap <C-l> <C-w>l
noremap <M-u> <C-w>p<C-u><C-w>p
noremap <M-d> <C-w>p<C-d><C-w>p
noremap <M-j> <C-w>p5<C-e><C-w>p
noremap <M-k> <C-w>p5<C-y><C-w>p
nnoremap <silent> <leader>t :tabnew<CR>
nnoremap <silent> <leader>n :enew<CR>
nnoremap <silent> <leader>lo :lopen<CR>
nnoremap <silent> <leader>lc :lclose<CR>
nnoremap <silent> <leader>lp :FZFLocList!<CR>
nnoremap <silent> <leader>qo :copen<CR>
nnoremap <silent> <leader>qc :cclose<CR>
nnoremap <silent> <leader>qp :FZFQuickFix!<CR>
nnoremap <silent> <leader>gd :YcmCompleter GoTo<CR>
nnoremap <silent> <leader>gr :YcmCompleter GoToReferences<CR>:q<CR>:copen<CR>
nnoremap <silent> <leader>fi :YcmCompleter FixIt<CR>
nnoremap <silent> <leader>gi :YcmCompleter GoToImplementation<CR>
nnoremap <silent> <leader>gt :YcmCompleter GoToType<CR>
nnoremap <silent> <leader>et :YcmCompleter GetType<CR>
nnoremap <silent> <leader>do :YcmCompleter GetDoc<CR>
nnoremap <silent> <C-f> :Rooter <bar> Files<CR>
nnoremap <silent> <C-t> :BTags<CR>
nnoremap <silent> <C-g> :Rooter <bar> CWAg!<CR>
nnoremap <silent> <C-b> :CWBLines!<CR>
nnoremap <silent> <C-c> :Commands<CR>
nnoremap <silent> <leader>m :Rooter<bar>FZFMru<CR>
nnoremap <silent> <leader>h :History<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>W :Windows<CR>
nnoremap <silent> <leader>: :History:<CR>
nnoremap <silent> <leader>/ :History/<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
inoremap <expr> <c-x><c-r> fzf#vim#complete('cat ~/.zsh_history\|cut -c 16-\|tac')
nmap s <Plug>(easymotion-overwin-f)
map  <leader>l <Plug>(easymotion-bd-jk)
nmap <leader>l <Plug>(easymotion-overwin-line)
map  <leader>w <Plug>(easymotion-bd-w)
nmap <leader>w <Plug>(easymotion-overwin-w)
nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
nnoremap <leader>zfs :set foldmethod=syntax<CR>
nnoremap <leader>zfi :set foldmethod=indent<CR>
map <C-e> :Rooter <bar> NERDTreeTabsToggle<CR>
nmap <leader>nt :Rooter <bar> NERDTreeFind<CR>
nnoremap <leader>pt :PreviewTag<CR>
nnoremap <leader>pc :PreviewClose<CR>
nnoremap <silent> <leader> :WhichKey ','<CR>

au FileType go nmap <Leader>gd :YcmCompleter GoTo<CR>
au FileType go nmap <leader>goi <Plug>(go-implements)
au FileType go nmap <leader>god <Plug>(go-describe)

if filereadable("./.workspace.vim")
   source ./.workspace.vim
endif
