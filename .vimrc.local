"plugin settings
let NERDTreeQuitOnOpen=0
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:indent_guides_enable_on_vim_startup = 0
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#ycm#error_symbol = 'E:'
let g:airline#extensions#ycm#warning_symbol = 'W:'
let g:signify_priority = 5
let g:ycm_always_populate_location_list = 1
highlight YcmWarningLine guibg=#ffffcc
highlight YcmWarningSign guibg=#ffffcc
highlight YcmWarningSection guibg=#ffffcc
let g:comfortable_motion_no_default_key_mappings = 1
let g:gutentags_ctags_executable = 'ctags-universal'
let g:asyncrun_open = 8
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=Black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=Black
let g:cpp_class_scope_highlight = 1
let cpp_no_cpp14 = 1
let cpp_no_cpp17 = 1
let cpp_no_cpp20 = 1
let g:protodefprotogetter = '~/.vim/bundle/vim-protodef/pullproto.pl'
let g:disable_protodef_sorting = 1

"vim setting configure
set ttymouse=xterm2
set expandtab softtabstop=2 tabstop=2 shiftwidth=2
set undodir=~/.vim/undodir
set undofile
set showcmd
let g:solarized_termcolors=16
color solarized

function! s:p(...)
  let preview_args = get(g:, 'fzf_preview_window', ['right', 'ctrl-/'])
  if empty(preview_args)
    return { 'options': ['--preview-window', 'hidden'] }
  endif

  " For backward-compatiblity
  if type(preview_args) == type('')
    let preview_args = [preview_args]
  endif
  return call('fzf#vim#with_preview', extend(copy(a:000), preview_args))
endfunction

"fix alt key mapping
function! Terminal_MetaMode(mode)
  set ttimeout
  if $TMUX != ''
    set ttimeoutlen=30
  elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
    set ttimeoutlen=80
  endif
  if has('nvim') || has('gui_running')
    return
  endif
  function! s:metacode(mode, key)
    if a:mode == 0
        exec "set <M-".a:key.">=\e".a:key
    else
        exec "set <M-".a:key.">=\e]{0}".a:key."~"
    endif
  endfunc
  for i in range(10)
    call s:metacode(a:mode, nr2char(char2nr('0') + i))
  endfor
  for i in range(26)
    call s:metacode(a:mode, nr2char(char2nr('a') + i))
    call s:metacode(a:mode, nr2char(char2nr('A') + i))
  endfor
  if a:mode != 0
    for c in [',', '.', '/', ';', '[', ']', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  else
    for c in [',', '.', '/', ';', '{', '}']
      call s:metacode(a:mode, c)
    endfor
    for c in ['?', ':', '-', '_']
      call s:metacode(a:mode, c)
    endfor
  endif
endfunc


"abbrevate command configure
command! -bang -nargs=* FAg call fzf#vim#ag(expand('<cword>'),s:p(),<bang>0)
command! -bang -nargs=* FBLines
      \ call fzf#vim#buffer_lines(expand('<cword>'),
      \     fzf_preview#p(<bang>0, {'placeholder': fzf#shellescape(expand('%')) . ':{1}',
      \                 'options': '--preview-window +{1}-/2'}),
      \     <bang>0)

cnoreabbrev GAck Gcd <bar> Ack!
cnoreabbrev GAg Gcd <bar> Ag
cnoreabbrev AR AsyncRun
cnoreabbrev BM Bookmark
cnoreabbrev EBM EditBookmarks
"add slash
cnoreabbrev AS s/$/\//
"add back slash
cnoreabbrev ABS s/$/\\/
"remove trailing space
cnoreabbrev RTS s/\v[ ]+$//

"key mappings configure
let mapleader = ","
inoremap jj <Esc>
nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
call Terminal_MetaMode(0)
nnoremap <leader>gd :YcmCompleter GoTo<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>:q<CR>:copen<CR>
nnoremap <leader>fi :YcmCompleter FixIt<CR>
nnoremap <leader>gi :YcmCompleter GoToImplementation<CR>
nnoremap <leader>doc :YcmCompleter GetDoc<CR>
nmap s <Plug>(easymotion-s)
nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
nnoremap <silent> <C-f> :GFiles<CR>
nnoremap <silent> <C-t> :BTags<CR>
nnoremap <silent> <C-a> :Gcd <bar> FAg<CR>
nnoremap <silent> <C-l> :FBLines<CR>
nnoremap <silent> <C-k> :History<CR>
nnoremap <leader>pq :FZFQuickFix<CR>
nnoremap <leader>pl :FZFLocList<CR>
nnoremap <leader>zfs :set foldmethod=syntax<CR>
nnoremap <leader>zfi :set foldmethod=indent<CR>
map <C-e> :Gcd <bar> NERDTreeTabsToggle<CR>
nmap <leader>nt :Gcd <bar> NERDTreeFind<CR>
nnoremap <leader>pt :PreviewTag<CR>
nnoremap <leader>pc :PreviewClose<CR>

if filereadable("./.workspace.vim")
   source ./.workspace.vim
endif
